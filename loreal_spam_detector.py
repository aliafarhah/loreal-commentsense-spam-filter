# -*- coding: utf-8 -*-
"""Loreal_Spam_Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pQgE9-JLVjwMNX4YZ9vM_lPPUF1xu1UK
"""

import os
print(os.listdir('/content'))

!unzip "/content/dataset.zip" -d "/content/data"

import pandas as pd
df = pd.read_csv('/content/data/comments1.csv') # <-- CHANGE THIS NAME
print("Columns in the data:", df.columns.tolist())
df.head()

df['label'] = 0  # 0 = NOT SPAM
print("'label' column added.")

from google.colab import output
import ipywidgets as widgets
from IPython.display import display, clear_output

# Get 100 random comments
sample_df = df.sample(n=100, random_state=42)
current_index = 0

# Create buttons
spam_button = widgets.Button(description="🚩 SPAM", button_style='danger')
not_spam_button = widgets.Button(description="✅ NOT SPAM", button_style='success')

# Display area
comment_display = widgets.Output()

def update_display():
    with comment_display:
        clear_output(wait=True)
        if current_index < len(sample_df):
            comment = sample_df.iloc[current_index]['textOriginal'] # <- USE YOUR COLUMN NAME
            print(f"Comment {current_index+1}/100:\n---\n{comment}\n---")
        else:
            print("Done! You've labeled 100 comments.")

def on_spam_clicked(b):
    global current_index
    idx = sample_df.index[current_index]
    df.at[idx, 'label'] = 1  # Mark as SPAM
    next_comment()

def on_not_spam_clicked(b):
    next_comment() # Already 0 (Not Spam)

def next_comment():
    global current_index
    current_index += 1
    update_display()

spam_button.on_click(on_spam_clicked)
not_spam_button.on_click(on_not_spam_clicked)

display(widgets.HBox([spam_button, not_spam_button]))
display(comment_display)
update_display()

# STEP 6: GUARANTEED RULE-BASED SPAM FILTER

import re

def is_spam(comment):
    """
    This function returns TRUE if the comment is spam based on strict rules.
    It will catch 'follow me' and all other patterns you defined.
    """
    if pd.isna(comment):
        return False

    comment_str = str(comment).lower()

    # RULE 1: Contains links/URLs
    if re.search(r'http|www|\.com|\.net|\.xyz|\.io', comment_str):
        return True

    # RULE 2: Contains @mentions (especially with follow me)
    if re.search(r'@\w+', comment_str):
        # If it has @mention AND spammy phrases, it's spam
        if re.search(r'follow me|follow.*me|f4f|follow.*back', comment_str):
            return True
        if re.search(r'check.*out|profile|dm|discount|win|free|promoted|click|buy|cheap', comment_str):
            return True

    # RULE 3: Spammy phrases (even without @mentions)
    spam_phrases = [
        'follow me', 'follow for follow', 'f4f', 'follow back',
        'check out my', 'visit my profile', 'dm me', 'dm for',
        'win free', 'click here', 'buy now', 'cheap', 'discount',
        'promoted', 'make money', 'earn money'
    ]

    for phrase in spam_phrases:
        if phrase in comment_str:
            return True

    # RULE 4: Too many emojis (5+)
    emoji_count = len(re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]', comment_str))
    if emoji_count >= 5:
        return True

    # If none of the rules above are triggered, it's not spam
    return False

# Test the function immediately
test_comments = [
    "follow me @user123",
    "Follow me for more content!",
    "I love to follow fashion trends",
    "Check out my profile @instagram_user",
    "This product is amazing",
    "Win a free iPhone! Click here: http://scam.com"
]

print("🧪 TESTING GUARANTEED SPAM FILTER")
print("="*50)

for comment in test_comments:
    spam_result = is_spam(comment)
    if spam_result:
        print(f"🚩 SPAM - '{comment}'")
    else:
        print(f"✅ NOT SPAM - '{comment}'")

# TEST THE GUARANTEED RULE-BASED FILTER

import re
import pandas as pd

def is_spam(comment):
    """
    This function returns TRUE if the comment is spam based on strict rules.
    It will catch 'follow me' and all other patterns you defined.
    """
    if pd.isna(comment):
        return False

    comment_str = str(comment).lower()

    # RULE 1: Contains links/URLs
    if re.search(r'http|www|\.com|\.net|\.xyz|\.io', comment_str):
        return True

    # RULE 2: Contains @mentions (especially with follow me)
    if re.search(r'@\w+', comment_str):
        # If it has @mention AND spammy phrases, it's spam
        if re.search(r'follow me|follow.*me|f4f|follow.*back', comment_str):
            return True
        if re.search(r'check.*out|profile|dm|discount|win|free|promoted|click|buy|cheap', comment_str):
            return True

    # RULE 3: Spammy phrases (even without @mentions)
    spam_phrases = [
        'follow me', 'follow for follow', 'f4f', 'follow back',
        'check out my', 'visit my profile', 'dm me', 'dm for',
        'win free', 'click here', 'buy now', 'cheap', 'discount',
        'promoted', 'make money', 'earn money'
    ]

    for phrase in spam_phrases:
        if phrase in comment_str:
            return True

    # RULE 4: Too many emojis (5+)
    emoji_count = len(re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]', comment_str))
    if emoji_count >= 5:
        return True

    # If none of the rules above are triggered, it's not spam
    return False

# Test the function immediately
test_comments = [
    "follow me @user123",                  # Should be SPAM
    "Follow me for more content!",         # Should be SPAM
    "I love to follow fashion trends",     # Should be NOT SPAM (uses "follow" differently)
    "Check out my profile @instagram_user",# Should be SPAM
    "This product is amazing",             # Should be NOT SPAM
    "Win a free iPhone! Click here: http://scam.com", # Should be SPAM
    "DM me for a discount code!",          # Should be SPAM
    "The packaging is beautiful"           # Should be NOT SPAM
]

print("🧪 TESTING GUARANTEED SPAM FILTER")
print("="*50)

for comment in test_comments:
    spam_result = is_spam(comment)
    if spam_result:
        print(f"🚩 SPAM - '{comment}'")
    else:
        print(f"✅ NOT SPAM - '{comment}'")

import pandas as pd
df = pd.read_csv('/content/data/comments2.csv') # <-- CHANGE THIS NAME
print("Columns in the data:", df.columns.tolist())
df.head()

# AUTOMATIC AI SPAM DETECTION (NO MANUAL LABELING NEEDED)
import pandas as pd
import re

df = pd.read_csv('/content/data/comments2.csv')
comment_column = 'textOriginal'

print("🔍 AI Automatic Spam Detection Starting...")
print(f"Analyzing column: '{comment_column}'")
print(f"Dataset size: {len(df)} comments")

# 1. Define AI Spam Detection Rules
def ai_detect_spam(comment):
    """
    AI-powered spam detection using rule-based patterns
    """
    if pd.isna(comment):
        return False, "Empty comment"

    text = str(comment).lower()

    # Pattern 1: URL/Links (Strong spam indicator)
    if re.search(r'http|www|\.com|\.net|\.io|\.xyz|bit\.ly|t\.co', text):
        return True, "Contains URL/link"

    # Pattern 2: Follow requests with mentions
    if re.search(r'@\w+', text) and re.search(r'follow|f4f|followback|follow me', text):
        return True, "Follow request with mention"

    # Pattern 3: Financial scams
    if re.search(r'make money|earn money|get paid|work from home|investment|cash app|paypal|$[0-9]', text):
        return True, "Financial scam content"

    # Pattern 4: Generic spam phrases
    spam_phrases = [
        'check out my', 'visit my page', 'dm me', 'dm for',
        'win free', 'click here', 'buy now', 'cheap', 'discount',
        'promoted', 'limited offer', 'only today', 'subscribe to',
        'check profile', 'link in bio', 'giveaway', 'free gift'
    ]

    for phrase in spam_phrases:
        if phrase in text:
            return True, f"Contains spam phrase: '{phrase}'"

    # Pattern 5: Excessive emojis (5+)
    emoji_count = len(re.findall(r'[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF]', text))
    if emoji_count >= 5:
        return True, f"Excessive emojis ({emoji_count})"

    # Pattern 6: Too short and generic
    if len(text) < 15 and any(word in text for word in ['nice', 'good', 'cool', 'great', 'awesome', 'thanks']):
        return True, "Short generic comment"

    # If none of the above, it's probably genuine
    return False, "Genuine engagement"

# 2. Apply AI Detection to Entire Dataset
print("\n⏳ AI is analyzing comments...")

results = []
for comment in df[comment_column]:
    is_spam, reason = ai_detect_spam(comment)
    results.append({'comment': comment, 'is_spam': is_spam, 'reason': reason})

# Create results dataframe
results_df = pd.DataFrame(results)

# 3. Add results to original dataframe
df['is_spam'] = results_df['is_spam']
df['spam_reason'] = results_df['reason']

# 4. Show Results
spam_count = df['is_spam'].sum()
total_count = len(df)

print("✅ AI Analysis Complete!")
print("="*50)
print(f"📊 Total comments analyzed: {total_count}")
print(f"🚩 Spam detected: {spam_count}")
print(f"✅ Genuine comments: {total_count - spam_count}")
print(f"📈 Spam percentage: {spam_count/total_count:.1%}")

# 5. Show sample of detected spam
print("\n🔍 Sample of detected spam:")
print("="*50)
spam_samples = df[df['is_spam'] == True].head(5)
for idx, row in spam_samples.iterrows():
    print(f"🚩 {row[comment_column]}")
    print(f"   Reason: {row['spam_reason']}")
    print()

# FINAL QUALITY CHECK FOR L'ORÉAL DATATHON SUBMISSION

print("🔍 FINAL QUALITY CHECK")
print("="*50)
print("1. Testing Spam Filter on L'Oréal Data...")
print("="*50)

# 1. Show stats on L'Oréal data
spam_count = df['is_spam'].sum()
total_count = len(df)
spam_ratio = spam_count / total_count

print(f"📊 Dataset: {total_count} comments")
print(f"🚩 Spam detected: {spam_count} comments")
print(f"✅ Genuine engagement: {total_count - spam_count} comments")
print(f"📈 Spam Ratio: {spam_ratio:.1%}")

print("\n" + "="*50)
print("2. Testing Rule Effectiveness...")
print("="*50)

# 2. Show examples of what you catch
spam_examples = df[df['is_spam'] == True]['textOriginal'].head(3).tolist()
genuine_examples = df[df['is_spam'] == False]['textOriginal'].head(3).tolist()

print("Caught as SPAM (good catches):")
for example in spam_examples:
    print(f"   🚩 {example}")

print("\n" + "Marked as GENUINE (good calls):")
for example in genuine_examples:
    print(f"   ✅ {example}")

print("\n" + "="*50)
print("3. Business Value for L'Oréal")
print("="*50)

# 3. Explain the business value
print("🎯 YOUR PROJECT DELIVERS:")
print("   • Clean Share of Engagement (SoE) metrics")
print("   • Accurate ratio of quality comments: {:.1%}".format(1 - spam_ratio))
print("   • Time savings for marketing analysts")
print("   • Protection from malicious links/scams")